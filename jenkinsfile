pipeline {
    agent any
    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        SONAR_SCANNER_HOME = tool 'sonar-scaner-v1.0'
        SONAR_TOKEN	= credentials('sonar_token_v1_ex30')
    }
    tools {
        nodejs "nodejs-16.20"
    }

    stages {
        stage('Create .env File to auth-service') {
            steps {
                script {
                    sh "ls -a"

                    def envContent = """\
                    PORT="8081"
                    URL_DB="mongodb://root:30122002@103.98.160.26:27020"
                    DB_NAME="S3_AUTH"
                    NODE_ENV="production"
                    """
                    writeFile file: './auth-service/.env', text: envContent
                }
            }
        }
         stage('Create .env File to tour-service') {
            steps {
                script {
                    sh "ls -a"

                    def envContent = """\
                        PORT="8082"
                        URL_DB="mongodb://root:30122002@103.98.160.26:27020"
                        DB_NAME="S3_TOUR"
                        NODE_ENV="production"
                        GRPC_PORT_AUTH="10002"
                    """
                    writeFile file: './tour-service/.env', text: envContent
                }
            }
        }

         stage('Create .env File to agent-service') {
            steps {
                script {
                    sh "ls -a"

                    def envContent = """\
                    PORT="8083"
                    URL_DB="mongodb://root:30122002@103.98.160.26:27020"
                    DB_NAME="S3_BOOKING"
                    NODE_ENV="production"
                    GRPC_PORT_AUTH="10002"
                    """
                    writeFile file: './agent-service/.env', text: envContent
                }
            }
        }


        stage('run unitest auth-service') {
            steps {
               echo("success")
            }
        }

        stage('run unitest agent-service') {
            steps {
               echo("success")
            }
        }

        stage('run unitest tour-service') {
            steps {
               echo("success")
            }
        }

        stage('run unitest booking-service') {
            steps {
               echo("success")
            }
        }


        stage('Build and Test') {
            steps {
                script {
                    // Build and start the services using Docker Compose
                    sh "docker compose build"
                    
                    // sh 'sleep 10'
                    

                    // sh 'docker compose ${DOCKER_COMPOSE_FILE} exec  auth-service'
                    // sh 'docker compose ${DOCKER_COMPOSE_FILE} exec  tour-service'
                    // sh 'docker compose ${DOCKER_COMPOSE_FILE} exec  agent-service'
                    // sh 'docker compose -f ${DOCKER_COMPOSE_FILE} exec auth npm run test'
                }
            }

        }
        stage('SonarQube Analysis') {
                steps {
                    withSonarQubeEnv('sonar_server_10.2.1') {
                        sh "node -v "
                        echo "${SONAR_TOKEN}"

                        sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=tour-saas \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://103.98.160.26:9090 \
                            -Dsonar.token=${SONAR_TOKEN}"
                    }

            }
        }

        stage('Deploy') {
            steps {
              
               withDockerRegistry(credentialsId: 'docker_hub', url: 'https://index.docker.io/v1/') {
                    // sh 'docker compose build'
                    sh 'docker compose push'
                    sh 'sleep 10'
               }
            }
        }
    }
    post {
        success {
            // If all stages are successful, stop and remove the containers
            script {
                sh "docker compose -f ${DOCKER_COMPOSE_FILE} down"
                sh "docker compose -f ${DOCKER_COMPOSE_FILE} down --rmi all"

                sh "docker compose up -d"
                sh 'docker ps -a'
                sh 'docker images'
                sh 'docker compose -f ${DOCKER_COMPOSE_FILE} exec auth npm run test'

              
            }
        }
        failure {
            // If the build fails, stop and remove the containers
            // script {    
            //     sh "docker compose -f ${DOCKER_COMPOSE_FILE} down"
            //     sh "docker compose -f ${DOCKER_COMPOSE_FILE} down --rmi all"

            // }

            echo "faild"
        }
    }
}
